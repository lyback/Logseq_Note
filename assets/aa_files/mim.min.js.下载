/**
 * MIM 消息通知脚本
 * @author 3257132998@qq.com
 */

!function () {
  if (typeof(jQuery) !== 'function') {
    throw new Error('请先引入jQuery');
  }
  /**
   * 定义 MIM
   * @type {Object} 
   */
  var _a = {};
  window.MIM = _a;
}(),
  function () {
    MIM.ws = false;
    MIM.session = false;

    /**
     * MIM 配置项
     * @type {Object}
     */
    MIM.config = {
      debug: false, // 开启调试模式
      heartbeat: 6000, // 心跳频率
      host: 'ws://192.168.0.223', // 必填，默认socket主机，带协议（wss/ws）
      port: 9090, // 必填，默认socket端口
      appid: -1, //应用ID
      timestamp: '', // 必填，生成签名的时间戳
      nonceStr: '', // 必填，生成签名的随机串
      signature: '',// 必填，签名
    };
  }(),
  function () {
    var callback = {
      'onSuccess': {},
      'onError': {},
    };

    /**
     * MIM 初始化
     * @param  {[type]} config [description]
     * @return {[type]}        [description]
     */
    MIM.init = function (config, cfn) {
      if (typeof(config) !== 'object') {
        _alert('The config para must be a valid object.');
      }

      for (_x in config) {
        if (typeof(this.config[_x]) !== 'undefined') {
          this.config[_x] = config[_x];
        }
      }

      this.ws = new WebSocket(this.config.host + ':' + this.config.port + '?appid=' + this.config.appid + '&timestamp=' + this.config.timestamp + '&nonceStr=' + this.config.nonceStr + '&signature=' + this.config.signature);

      this.ws.onopen = function () {
        if (cfn && typeof cfn == 'function') {
          cfn(this.readyState);
        }
        _alert('onopen ok.');
      };

      this.ws.onmessage = function (e) {
        // console.log(e);
        // if(typeof(e.data) != 'undefined'){
          var data = JSON.parse(e.data);
          if (!data.errcode) {
            if (typeof(callback.onSuccess[data.callback]) == 'function') {
              callback.onSuccess[data.callback](data);
            }
          } else {
            if (typeof(callback.onError[data.callback]) == 'function') {
              callback.onError[data.callback](data);
            }
          }
        // }
        
      };

      this.ws.onclose = function () {
        MIM.ws = false;
        // alert('会话超时，请刷新当前页面。');
        // window.location.reload();
      };

      this.ws.onerror = function () {
        if (cfn && typeof cfn == 'function') {
          cfn(this.readyState);
        }
          _alert('error: readyState ' + this.readyState);
      }
    };

    /**
     * MIM 就绪，类似 jQuery 的ready()
     * @return {[type]} [description]
     */
    MIM.ready = function (a) {
      //开始心跳
      setInterval(function () {
        _send({
          'mod': 'Heartbeat',
          'action': 'response',
        });
      }, MIM.config.heartbeat);

      _waitForConnection(function () {
        a();
      }, 500);
    };

    /**
     * MIM 登录就绪
     * @return {[type]} [description]
     */
    MIM.loginReady = function (a) {
      _waitForLoginReady(function () {
        a();
      }, 500);
    };


    /**
     * MIM 获取直通车获取最近会话用户列表
     * @param  {[type]} a [description]
     * @return {[type]}   [description]
     */
    MIM.getMpRecentGuestList = function (a) {
      if (!this.ws) {
        throw new Error("must init first.");
      }

      if (!this.session) {
        throw new Error("must login first.");
      }

      _functionRegister('getMpRecentGuestList', a);
      _send({
        'mod': 'Mp',
        'action': 'getMpRecentGuestList',
        'keyword': a.keyword,
      });
    }

    /**
     * MIM 获取直通车粉丝列表（普通列表带分页）
     * @param  {[type]} a [description]
     * @return {[type]}   [description]
     */
    MIM.getMpFansList = function (a) {
      if (!this.ws) {
        throw new Error("must init first.");
      }

      if (!this.session) {
        throw new Error("must login first.");
      }

      _functionRegister('getMpFansList', a);
      _send({
        'mod': 'Mp',
        'action': 'getMpFansList',
        'page': a.page,
        'pagesize': a.pagesize,
        'keyword': a.keyword,
      });
    }

    /**
     * MIM 获取直通车粉丝列表（按字母排序分组）
     * @param  {[type]} a [description]
     * @return {[type]}   [description]
     */
    MIM.getMpFansListGroupByUC = function (a) {
      if (!this.ws) {
        throw new Error("must init first.");
      }

      if (!this.session) {
        throw new Error("must login first.");
      }

      _functionRegister('getMpFansListGroupByUC', a);
      _send({
        'mod': 'Mp',
        'action': 'getMpFansListGroupByUC',
        'keyword': a.keyword,
      });
    }

    /**
     * MIM 获取直通车黑名单列表
     * @param  {[type]} a [description]
     * @return {[type]}   [description]
     */
    MIM.getMpBlackFansList = function (a) {
      if (!this.ws) {
        throw new Error("must init first.");
      }

      if (!this.session) {
        throw new Error("must login first.");
      }

      _functionRegister('getMpBlackFansList', a);
      _send({
        'mod': 'Mp',
        'action': 'getMpBlackFansList',
        'keyword': a.keyword,
      });
    }


    /**
     * MIM 直通车发送单聊消息给个人
     * @param  {[type]} a [description]
     * @return {[type]}   [description]
     */
    MIM.mpSendSingleMsgToUser = function (a) {
      if (!this.ws) {
        throw new Error("must init first.");
      }

      if (!this.session) {
        throw new Error("must login first.");
      }

      _functionRegister('mpSendSingleMsgToUser', a);
      _send({
        'mod': 'Mp',
        'action': 'mpSendSingleMsgToUser',
        'target_user_id': a.target_user_id,
        'content': a.content,
        'attachment_src': a.attachment_src,
      });
    }

    /**
     * MIM 获取直通车粉丝会话列表（普通列表带分页）
     * @param  {[type]} a [description]
     * @return {[type]}   [description]
     */
    MIM.getMpFansMessageList = function (a) {
      if (!this.ws) {
        throw new Error("must init first.");
      }

      if (!this.session) {
        throw new Error("must login first.");
      }

      _functionRegister('getMpFansMessageList', a);
      _send({
        'mod': 'Mp',
        'action': 'getMpFansMessageList',
        'target_user_id': a.target_user_id,
        'page': a.page,
        'pagesize': a.pagesize,
      });
    }

    /**
     * MIM 获取直通车用户组列表
     * @param  {[type]} a [description]
     * @return {[type]}   [description]
     */
    MIM.getMpGroupList = function (a) {
      if (!this.ws) {
        throw new Error("must init first.");
      }

      if (!this.session) {
        throw new Error("must login first.");
      }

      _functionRegister('getMpGroupList', a);
      _send({
        'mod': 'Mp',
        'action': 'getMpGroupList',
        'keyword': a.keyword,
      });
    }

    /**
     * MIM 获取直通车群发消息列表
     * @param  {[type]} a [description]
     * @return {[type]}   [description]
     */
    MIM.getMpGroupMessageList = function (a) {
      if (!this.ws) {
        throw new Error("must init first.");
      }

      if (!this.session) {
        throw new Error("must login first.");
      }

      _functionRegister('getMpGroupMessageList', a);
      _send({
        'mod': 'Mp',
        'action': 'getMpGroupMessageList',
        'target_group_id': a.target_group_id, // 粉丝群组传 -1
      });
    }

    /**
     * MIM 直通车发送群组消息
     * @param  {[type]} a [description]
     * @return {[type]}   [description]
     */
    MIM.mpSendGroupMsgToUser = function (a) {
      if (!this.ws) {
        throw new Error("must init first.");
      }

      if (!this.session) {
        throw new Error("must login first.");
      }

      _functionRegister('mpSendGroupMsgToUser', a);
      _send({
        'mod': 'Mp',
        'action': 'mpSendGroupMsgToUser',
        'target_group_id': a.target_group_id, // 粉丝群组传 -1
        'content': a.content,
        'attachment_src': a.attachment_src,
      });
    }

    /**
     * MIM 获取直通车用户组用户列表
     * @param  {[type]} a [description]
     * @return {[type]}   [description]
     */
    MIM.getMpGroupUserList = function (a) {
      if (!this.ws) {
        throw new Error("must init first.");
      }

      if (!this.session) {
        throw new Error("must login first.");
      }

      _functionRegister('getMpGroupUserList', a);
      _send({
        'mod': 'Mp',
        'action': 'getMpGroupUserList',
        'group_id': a.group_id,
      });
    }

    /**
     * MIM 重定义分组名称
     * @param  {[type]} a [description]
     * @return {[type]}   [description]
     */
    MIM.mpReNameGroupName = function (a) {
      if (!this.ws) {
        throw new Error("must init first.");
      }

      if (!this.session) {
        throw new Error("must login first.");
      }

      _functionRegister('mpReNameGroupName', a);
      _send({
        'mod': 'Mp',
        'action': 'mpReNameGroupName',
        'group_id': a.group_id,
        'name': a.name,
      });
    }

    /**
     * MIM 添加/移除用户到黑名单
     * @param  {[type]} a [description]
     * @return {[type]}   [description]
     */
    MIM.mpOpUserToBlackList = function (a) {
      if (!this.ws) {
        throw new Error("must init first.");
      }

      if (!this.session) {
        throw new Error("must login first.");
      }

      _functionRegister('mpOpUserToBlackList', a);
      _send({
        'mod': 'Mp',
        'action': 'mpOpUserToBlackList',
        'target_user_id': a.target_user_id, //要操作的用户
        'op_type': a.op_type, //1 添加到黑名单  -1 移除黑名单
      });
    }

    /**
     * MIM 个人发送单聊消息给直通车
     * @param  {[type]} a [description]
     * @return {[type]}   [description]
     */
    MIM.guestSendSingleMsgToMp = function (a) {
      if (!this.ws) {
        throw new Error("must init first.");
      }

      if (!this.session) {
        throw new Error("must login first.");
      }

      _functionRegister('guestSendSingleMsgToMp', a);
      _send({
        'mod': 'Guest',
        'action': 'guestSendSingleMsgToMp',
        'target_user_id': a.target_user_id,
        'content': a.content,
        'attachment_src': a.attachment_src,
      });
    }

    /**
     * MIM 用户删除/清空同直通车历史聊天记录
     * @param  {[type]} a [description]
     * @return {[type]}   [description]
     */
    MIM.guestRemoveMpMessageHistory = function (a) {
      if (!this.ws) {
        throw new Error("must init first.");
      }

      if (!this.session) {
        throw new Error("must login first.");
      }

      _functionRegister('guestRemoveMpMessageHistory', a);
      _send({
        'mod': 'Guest',
        'action': 'guestRemoveMpMessageHistory',
        'target_user_id': a.target_user_id, // -1 则是清空
      });
    }

    /**
     * MIM 获取个人与单个直通车会话列表（普通列表带分页）
     * @param  {[type]} a [description]
     * @return {[type]}   [description]
     */
    MIM.getGuest2MpMessageList = function (a) {
      if (!this.ws) {
        throw new Error("must init first.");
      }

      if (!this.session) {
        throw new Error("must login first.");
      }

      _functionRegister('getGuest2MpMessageList', a);
      _send({
        'mod': 'Guest',
        'action': 'getGuest2MpMessageList',
        'target_user_id': a.target_user_id,
        'page': a.page,
        'pagesize': a.pagesize,
      });
    }

    /**
     * MIM 获取个人的私信会话列表
     * @param  {[type]} a [description]
     * @return {[type]}   [description]
     */
    MIM.getGuestMpMessageList = function (a) {
      if (!this.ws) {
        throw new Error("must init first.");
      }

      if (!this.session) {
        throw new Error("must login first.");
      }

      _functionRegister('getGuestMpMessageList', a);
      _send({
        'mod': 'Guest',
        'action': 'getGuestMpMessageList',
      });
    }

    /**
     * MIM 发送直播消息
     * @param  {[type]} a [description]
     * @return {[type]}   [description]
     */
    MIM.sendLiveMessage = function (a) {
      if (!this.ws) {
        throw new Error("must init first.");
      }

      if (!this.session) {
        throw new Error("must login first.");
      }

      _functionRegister('sendLiveMessage', a);
      _send({
        'mod': 'Live',
        'action': 'sendLiveMessage',
        'liveid': a.liveid,
        'content': a.content,
        'userinfo': a.userinfo
      });
    }


    /**
     * MIM 用户登录
     * @param  {[type]} a [description]
     * @return {[type]}   [description]
     */
    MIM.login = function (a) {
      if (!this.ws) {
        throw new Error("must init first.");
      }

      _functionRegister('login', a);
      _send({
        'mod': 'User',
        'action': 'login',
        'appid': a.appid,
        'session': a.session,
      });
    }

    /**
     * MIM 用户登出
     * @param  {[type]} a [description]
     * @return {[type]}   [description]
     */
    MIM.logout = function (a) {
      if (!this.ws) {
        throw new Error("must init first.");
      }

      _functionRegister('logout', a);
      _send({
        'mod': 'User',
        'action': 'logout',
      });
    }

    /**
     * MIM 获取指定 AppID 所有在线用户
     * @param  {[type]} a [description]
     * @return {[type]}   [description]
     */
    MIM.getOnlineUser = function (a) {
      if (!this.ws) {
        throw new Error("must init first.");
      }

      if (!this.session) {
        throw new Error("must login first.");
      }

      _functionRegister('getOnlineUser', a);
      _send({
        'mod': 'User',
        'action': 'getOnlineUser',
      });
    }

    /**
     * MIM 获取指定 直播 聊天列表
     * @param  {[type]} a [description]
     * @return {[type]}   [description]
     */
    MIM.getLiveMessage = function (a) {
      if (!this.ws) {
        throw new Error("must init first.");
      }

      if (!this.session) {
        throw new Error("must login first.");
      }

      _functionRegister('getLiveMessage', a);
      _send({
        'mod': 'Live',
        'action': 'getLiveMessage',
        'liveid': a.liveid,
        'page': a.page ? a.page : 1,
        'pagesize': a.pagesize ? a.pagesize : 10,
      });
    }

    /**
     * MIM 获取指定 直播 所有在线用户数
     * @param  {[type]} a [description]
     * @return {[type]}   [description]
     */
    MIM.getLiveOnlineUserCount = function (a) {
      if (!this.ws) {
        throw new Error("must init first.");
      }

      if (!this.session) {
        throw new Error("must login first.");
      }

      _functionRegister('getLiveOnlineUserCount', a);
      _send({
        'mod': 'Live',
        'action': 'getLiveOnlineUserCount',
        'liveid': a.liveid,
      });
    }


    /*************** 以下是系统回调函数 ***************/
    /**
     * 上线通知
     * @param  {[type]} a [description]
     * @return {[type]}   [description]
     */
    MIM.loginNotificationCallBack = function (a) {
      if (!this.ws) {
        throw new Error("must init first");
      }

      _functionRegister('loginNotificationCallBack', a);
    }

    /**
     * 直通车发送单聊消息给个人（私信）回调
     * @param  {[type]} a [description]
     * @return {[type]}   [description]
     */
    MIM.mpSendSingleMsgToUserCallBack = function (a) {
      if (!this.ws) {
        throw new Error("must init first");
      }

      _functionRegister('mpSendSingleMsgToUserCallBack', a);
    }

    /**
     * 直通车发送群组消息回调
     * @param  {[type]} a [description]
     * @return {[type]}   [description]
     */
    MIM.mpSendGroupMsgToUserCallBack = function (a) {
      if (!this.ws) {
        throw new Error("must init first");
      }

      _functionRegister('mpSendGroupMsgToUserCallBack', a);
    }

    /**
     * 个人发送单聊消息给直通车（私信）回调
     * @param  {[type]} a [description]
     * @return {[type]}   [description]
     */
    MIM.guestSendSingleMsgToMpCallBack = function (a) {
      if (!this.ws) {
        throw new Error("must init first");
      }

      _functionRegister('guestSendSingleMsgToMpCallBack', a);
    }

    /**
     * 下线通知
     * @param  {[type]} a [description]
     * @return {[type]}   [description]
     */
    MIM.logoutNotificationCallBack = function (a) {
      if (!this.ws) {
        throw new Error("must init first");
      }

      _functionRegister('logoutNotificationCallBack', a);
    }

    /**
     * 发送直播消息通知
     * @param  {[type]} a [description]
     * @return {[type]}   [description]
     */
    MIM.sendLiveMessageCallBack = function (a) {
      if (!this.ws) {
        throw new Error("must init first");
      }

      _functionRegister('sendLiveMessageCallBack', a);
    }

    /*************** 以下是私有函数 ***************/

    /**
     * 私有函数，注册回调函数
     * @param  {[type]} m [description]
     * @param  {[type]} n [description]
     * @return {[type]}   [description]
     */
    function _functionRegister(m, n) {
      if (typeof(n.success) == 'function') {
        callback.onSuccess[m] = n.success;
      }

      if (typeof(n.error) == 'function') {
        callback.onError[m] = n.error;
      }
    }

    /**
     * 私有函数，用于alert信息msg
     * @param  {[type]} msg [description]
     * @return {[type]}     [description]
     *
     */
    function _alert(msg) {
      if (MIM.config.debug) {
        alert(msg);
      } else {
        // console.log('[' + _getNowFormatDate() + ']' + msg);
      }
    }

    /**
     * 私有函数，返回格式化后的现在
     * @return {[type]} [description]
     */
    function _getNowFormatDate() {
      var date = new Date();
      var seperator1 = "-";
      var seperator2 = ":";
      var month = date.getMonth() + 1;
      var strDate = date.getDate();

      if (month >= 1 && month <= 9) {
        month = "0" + month;
      }

      if (strDate >= 0 && strDate <= 9) {
        strDate = "0" + strDate;
      }

      var currentdate = date.getFullYear() + seperator1 + month + seperator1 + strDate
        + " " + date.getHours() + seperator2 + date.getMinutes()
        + seperator2 + date.getSeconds();
      return currentdate;
    }

    /**
     * 私有函数，WS消息发送
     * @param  {[type]} msg [description]
     * @return {[type]}     [description]
     */
    function _send(msg) {
      var msg = JSON.stringify(msg);
      // console.log('[send at ' + _getNowFormatDate() + ']' + msg)

      // console.log(typeof(msg));
      _waitForConnection(function () {
        MIM.ws.send(msg);
      }, 500);
    }

    /**
     * 私有函数，此函数用于校验ws的连接状态是不是为1
     * @param  {Function} callback [description]
     * @param  {[type]}   interval [description]
     * @return {[type]}            [description]
     */
    function _waitForConnection(callback, interval) {
      if (MIM.ws.readyState === 1) {
        callback();
      } else {
        setTimeout(function () {
          _waitForConnection(callback, interval);
        }, interval);
      }
    };

    /**
     * 私有函数，此函数用于校验是否已登录
     * @param  {Function} callback [description]
     * @param  {[type]}   interval [description]
     * @return {[type]}            [description]
     */
    function _waitForLoginReady(callback, interval) {
      if (MIM.session) {
        callback();
      } else {
        setTimeout(function () {
          _waitForLoginReady(callback, interval);
        }, interval);
      }
    };

    /**
     * 判断一个变量是不是一个接送字符串
     * @param  {[type]}  str [description]
     * @return {Boolean}     [description]
     */
    function _isJSON(str) {
        if (typeof str == 'string') {
            try {
                var obj = _parseJSON(str);
                if(typeof obj == 'object' && obj ){
                    return true;
                }else{
                    return false;
                }

            } catch(e) {
                return false;
            }
        }
    }
  }();
